needed 45mins to understand the task and draw a sketch of what's going on.
Not sure if I'll be able to do it.
Learned what a "most significant bit" (MSB) is
2 hours in and it seems the parser for literals works.
Now I need to write the parser for the operators
2h42min: Built in a stack to check against stopval if I=0
3hrs: this is extremely difficult, I have no idea about stacks.
Where to check the stack? And to which decision should it lead?
3hrs44min seems like it should work in theory now if I=0,
let's test it in practice - yes, seems to work immediately :O
Let's test it with longer hexes - no errer but returns only the first version number.
Ah, it's because I haven't defined what happened if I=1 yet.
Let's see if there are examples where that's omitted.
Example two enters infinite recursion.
*sigh*. let's add another layer of complexity.
print statements don't work in an infinite recursion setting?? :OO Oh Jupyter!!
4:13min I think it should work in theory - have to check step by step against the example.
ok, so far it works until number of subpackets = 3, then infinite recursion enters. Why.
Fuck. I have to convert hex2bin only ONCE, before I input it.
Now I converted bin2bin all the time.
4hrs43min: It doesn't throw errors for none of the examples.
The results could be almost good, but they're slightly off.
5hrs11min: I'm almost there:
5hrs30min: Seems I've found the problem: lenght of subpackages is without trailing zeros.
but literal skips zeros.
5hrs51min: I give up. It must be a small mistake but I can't figure out which one.
Why does it not simply finish the iteration.
If I uncomment
    if s in ["", "0", "00", "000"]: #this is where we end
        print("weird spot huh")
        return None
Then the program crashes, vlist is correct, but for the other examples it's not.